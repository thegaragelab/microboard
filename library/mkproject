#!/bin/sh
#----------------------------------------------------------------------------
# Generate a new project from one of the available templates.
#----------------------------------------------------------------------------

# Get our current directory
PROJECT_DIR=`pwd`
PROJECT_DIR=`readlink -f ${PROJECT_DIR}`

# Determine where the Microboard libraries are installed
MICROBOARD_BASE=`dirname $0`
MICROBOARD_BASE=`readlink -f ${MICROBOARD_BASE}`

# Determine the location of the templates
TEMPLATE_DIR=`readlink -f ${MICROBOARD_BASE}/template`

# Make sure the user wants to proceed
cat <<!
WARNING:

This script will copy files from the selected template into the current
directory. If files with the same name already exist, they will be overwritten.

!

read -p "Continue (yes/no)? " ANSWER
if [ "X${ANSWER}" != "Xyes" ]; then
  echo "\nOperation canceled."
  exit 0
fi

# Generate a list of available templates
TEMPLATES=""
for f in `find ${TEMPLATE_DIR} -type d`; do
  if [ -f ${f}/Makefile ]; then
    TEMPLATES="${TEMPLATES} `basename $f`"
  fi
done

echo "\nAvailable templates are: ${TEMPLATES}"

# Get the user to select one
ANSWER=""
while [ "X${ANSWER}" = "X" ]; do
  read -p "Enter template name: " ANSWER
done

if [ ! -f ${TEMPLATE_DIR}/${ANSWER}/Makefile ]; then
  echo "\nInvalid template - ${ANSWER}. Operation canceled."
  exit 1
fi
TEMPLATE_FILES=`readlink -f ${TEMPLATE_DIR}/${ANSWER}`

# Now get a project name
cat <<!

Now you need to select a name for your project. This must be a sequence of
alphanumeric characters (no special characters or spaces). This name will be
used as the name of the output binary and is inserted into the template
make file.

!

ANSWER=""
while [ "X${ANSWER}" = "X" ]; do
  read -p "Enter project name: " ANSWER
done
PROJECT=${ANSWER}

# Copy in the files
echo "  Copying Makefile"
cp ${TEMPLATE_FILES}/Makefile .

echo "  Copying main.c"
if [ -f ${TEMPLATE_FILES}/main.c ]; then
  cp ${TEMPLATE_FILES}/main.c .
elif [ -f ${TEMPLATE_DIR}/main.c ]; then
  cp ${TEMPLATE_DIR}/main.c .
else
  echo "  ERROR: No 'main.c' - are you missing some files?"
  exit 1
fi

# Generate the Makefile variables
echo "  Generating Makefile.in"

WHEN=`date`

cat >Makefile.inc <<!
#----------------------------------------------------------------------------
# Project configuration for "${PROJECT}"
# Autogenerated on ${WHEN}
#----------------------------------------------------------------------------
PROJECT_NAME = ${PROJECT}

# Library installation location (autodetected)
MICROBOARD_BASE = ${MICROBOARD_BASE}

# Where to find include files and libraries
INCLUDE         = \$(MICROBOARD_BASE)/include
LIBS            = \$(MICROBOARD_BASE)/libs
!

